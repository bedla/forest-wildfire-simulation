; nacteni terenu ze souboru
to load-patch-data

  if ( file-exists? "teren.txt" )
  [
    file-open "teren.txt"
  
    let row 0
    while [ not file-at-end? ]
    [
      let seznam read-from-string (word "[" file-read-line "]")
      let seznam-length length seznam
      ifelse seznam-length = world-width and seznam-length = world-height
      [
        let col 0
        foreach seznam 
        [            
          ask patch row col
          [
            set height ?
          ]
        set col col + 1
      ]   
    ]
    [
      print seznam
    ]
    set row row + 1
  ]
    file-close
  ]  
  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; vrati patche, ktere jsou nizinami
to-report get-low-lands [ boundary ]
  ; nizina je o velikosti min az 20% do celkove likosti
  let avg-min-height min-height + ( max-height - min-height ) * boundary
  report patches with [ height >= min-height and height <= avg-min-height ]
end

; vrati patche, ktere jsou horami
to-report get-high-lands [ boundary ]
  ; hora je o velikosti max - 20% az do max
  let avg-max-height max-height - ( max-height - min-height ) * boundary
  report patches with [ height >= avg-max-height and height <= max-height ]
end

; vrati patche, ktere nejsou horami ani nizinami
to-report get-middle-lands [ low-lands-boundary high-lands-boundary ]
  ; hora je o velikosti max - 20% az do max
  let avg-max-height max-height - ( max-height - min-height ) * high-lands-boundary
  let avg-min-height min-height + ( max-height - min-height ) * low-lands-boundary
  
  report patches with [ height >= avg-min-height and height <= avg-max-height ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



to mouse-down
  if mouse-down?
  [
    ask patch mouse-xcor mouse-ycor
    [
      let a parcel-neighbors self
    ]
  ]
end

to mouse-down-get-shortest-path
  if mouse-down?
  [
    ask patch mouse-xcor mouse-ycor
    [
      if any? nodes-here and not clicked?
      [
        set clicked? true
      
        ask links
        [
          set thickness 0
        ]

        let path get-shortest-path one-of nodes-here
        
        print path
        
        while [ not empty? path ]
        [
          let a first path
          set path but-first path
          
          if not empty? path 
          [
            let b first path
          
            ask link ([who] of a) ([who] of b)
            [
              set thickness 3
            ]
          ]
        ]
        set clicked? false
      ]
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to show-hide-trees
  ask trees
  [
    set hidden? not hidden?
  ]
end

to show-hide-live-trees
  ask trees with [ live? ]
  [
    set hidden? not hidden?
  ]
end



to-report linearni-interpolace [x x1 x2 z1 z2]
  let t (x - x1) / (x2 - x1);    
  report z1 + t * (z2 - z1);    
end