; nastaveni dijkstry
to dijkstra-setup
  output-print (word "dijkstra-setup start")
  reset-timer
  dijkstra base
  
;  ask base
;  [
;    set color yellow
;    set size 10
;  ]
    
  output-print (word "dijkstra-setup in " timer " s")
end 


; vypocete dijkstru ze zadaneho nodu, podle algoritmu z wikipedie
to dijkstra [ start-node ]

  ask nodes
  [
    set dist infinity    ; vzdalenost od start-node
    set previous nobody  ; predchozi node vedouci nejkratsi cestou do start-node
  ]
  
  ; vynuluju vzdalenost ve start-node
  ask start-node
  [
    set dist 0
  ]
  
  ; vytvorim a npalnim seznam nody
  let Q []
  ask nodes
  [
    set Q lput self Q
  ]
  
  while [ not empty? Q ]
  [
    let u min-dist-node Q
    
    if [ dist ] of u != infinity
    [
      set Q remove u Q
                  
      ask [ link-neighbors ] of u
      [
        let uv-distance link-distance u self
        let alt ( [ dist ] of u ) + uv-distance
        if alt < dist
        [
          set dist alt
          let thisV self
          ask thisV
          [
            set previous u
          ]
          
        ]
      ]      
    ]   
  ]

; algoritmus z wikipedie  
;  function Dijkstra(Graph, source):
;      for each vertex v in Graph:           // Initializations
;          dist[v] := infinity               // Unknown distance function from source to v
;          previous[v] := undefined          // Previous node in optimal path from source
;      dist[source] := 0                     // Distance from source to source
;      Q := the set of all nodes in Graph
;        // All nodes in the graph are unoptimized - thus are in Q
;      while Q is not empty:                 // The main loop
;          u := vertex in Q with smallest dist[]
;          if dist[u] = infinity:
;              break                         // all remaining vertices are inaccessible
;          remove u from Q
;          for each neighbor v of u:         // where v has not yet been removed from Q.
;              alt := dist[u] + dist_between(u, v) 
;              if alt < dist[v]:             // Relax (u,v,a)
;                  dist[v] := alt
;                  previous[v] := u
;      return previous[]
  

end

; vrati node ze seznamu Q, ktery ma nejmensi vzdalenost od start-node
to-report min-dist-node [ Q ]
  if empty? Q
  [
    report nobody
  ]
  
  let result first Q
  let m [ dist ] of result
  foreach Q
  [
    if [ dist ] of ? < m
    [
      set result ?
      set m [ dist ] of ?
    ]
  ]
  report result
end

; vrati vzdalenost mezi dvema nody
to-report link-distance [u v]
  let result 0
  ask link [ who ] of u [ who ] of v
  [
    set result link-length
  ]
  report result
end

; vrati seznam nodu s nejkratsi cestou z nodu from-node do start-node
to-report get-shortest-path [ from-node ]
  let result []
  
  let thisNode from-node
  while [ thisNode != nobody ]
  [
    set result lput thisNode result    
    set thisNode [previous] of thisNode
  ]
  
  report result
end