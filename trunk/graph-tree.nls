; smaze linky, ktere byly dodatecne doplneny do grafu
to clear-graph-from-tree
  foreach created-links
  [
    ask ?
    [
      die
    ]
  ]
end

; ze stromu vytvori graf doplnenim spojnic v nizinach
to create-graph-from-tree
  output-print (word "create-graph-from-tree start")
  reset-timer
  
  ; nactu si nody, ktere jsou v nizinach
  let low-land-nodes get-nodes-from-lowlands
 
  ; pro kazdy nod
  foreach low-land-nodes
  [
    ask ?
    [
      let currentNode self
      ; budeme doplnovat jen nody do 4 okoli
      foreach ( list left-neighbors right-neighbors up-neighbors down-neighbors )
      [
        ; pokud nejake existujou
        if any? ?
        [
          ; nacteme si cisla parcel, z kazde parcely v listu
          let thisParcel-x [ parcel-x ] of one-of ?
          let thisParcel-y [ parcel-y ] of one-of ?
          
          ; zjistime si jake nody jsou na danych parcelach ve 4 okoli
          let thisNode nodes with [ node-parcel-x = thisParcel-x and node-parcel-y = thisParcel-y ]
          if any? thisNode
          [
            ; jeden nod doplnime na graf
            set thisNode one-of thisNode
            
            ; zjistim jestli uz neexistuje link
            let thisLink link ([ who ] of currentNode) ([ who ] of thisNode)
            if thisLink = nobody
            [
              ; a pokud neexistuje tak vytvorim link
              ask currentNode
              [
                create-link-with thisNode
                [
                  set created-links lput self created-links
                  set color red
                ]                
              ]           
            ]            
          ]
        ]
      ]
    ]
  ]
  
  output-print (word "create-graph-from-tree in " timer " s")
end

; vrati seznam nodu, ktere jsou v nizinach
to-report get-nodes-from-lowlands
  let result []

  ask nodes
  [
    if is-low-land?
    [
      set result lput self result
    ] 
  ]
  
  report result
end

; vrati seznam nodu, ktere maji parcely v nizinach
to nodes-in-lowlands-in-parcel
  let low-land-nodes []
  
  foreach low-land-parcels
  [
    let n nodes with [ node-parcel-x = item 0 ? and node-parcel-y = item 1 ? ] 
    if any? n
    [
      set low-land-nodes lput one-of n low-land-nodes
    ]
  ]
  
;  foreach low-land-nodes
;  [
;    ask ?
;    [
;      set size 10
;    ]
;  ]
end
