; ze seznamu obsahujicim parcely vrati parcelu, ktera je nejniz
to-report min-parcel [ list-parcels ]
  if empty? list-parcels
  [
    report no-patches
  ]
  
  let min-neighbors item 0 list-parcels  
  let min-value min [ height ] of min-neighbors
  
  foreach list-parcels
  [
    if min [ height ] of ? < min-value
    [
      set min-neighbors ?
      set min-value min [ height ] of ?
    ]
  ]
  
  report min-neighbors
end

; ze seznamu parcel vrati seznam tech parcel, ktere jsou nizsi nez je %-ni hranice udavana "max-height-percent"
to-report min-parcels [ list-parcels max-height-percent ]
  let result []
  
  if empty? list-parcels
  [    
    report result
  ]
  
  ; zjistim si maximalni lokalni hodnotu v okoli
  let max-neighbors item 0 list-parcels  
  let max-value max [ height ] of max-neighbors  
  foreach list-parcels
  [
    if max [ height ] of ? > max-value
    [
      set max-neighbors ?
      set max-value max [ height ] of ?
    ]
  ]

  ; vypoctu si po jakou hodnotu bude okoli povazovano za kopec
  let max-height-value max-value * max-height-percent

  foreach list-parcels
  [
    if min [ height ] of ? < max-height-value
    [
      set result lput ? result
    ]
  ]
  
  report result
end

; pro vsechny parcely najde jejich sousedy v 8-mi okoli
; nastavuje sousedy pro kazdy patch
to setup-parcel-neighbors
  output-print (word "setup-parcel-neighbors start")
  reset-timer

  ; projedu parcely ve smeru X
  let x min-pxcor + deleni-x * 0.5
  while [ x <= max-pxcor ]
  [
    ; a ve smeru Y
    let y min-pycor + deleni-y * 0.5
    while [ y <= max-pycor ]
    [
      ; z kazde parcely si vemu jeden patch
      ; a zjistim si jeho sousedy, jako list o 8-mi prvcich
      let sousedi parcel-neighbors patch x y
      let this-parcel-x [ parcel-x ] of patch x y
      let this-parcel-y [ parcel-y ] of patch x y
      
      ; patchum aktualni parcely nastavim sousedy
      ask patches with [ parcel-x = this-parcel-x and parcel-y = this-parcel-y ]
      [
        set left-neighbors item 0 sousedi
        set right-neighbors item 1 sousedi
        set up-neighbors item 2 sousedi
        set down-neighbors item 3 sousedi

        set left-top-neighbors item 4 sousedi
        set left-bottom-neighbors item 7 sousedi
        set right-top-neighbors item 5 sousedi
        set right-bottom-neighbors item 6 sousedi        
      ]
      set y y + deleni-y
    ]
    set x x + deleni-x
  ]
  
  output-print (word "setup-parcel-neighbors in " timer " s")
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; pro vsechny parcely najde jejich sousedy ve 4 okoli
; nastavuje sousedy pro kazdy patch
to setup-parcel-neighbors4
  output-print (word "setup-parcel-neighbors4 start")
  reset-timer

  let x min-pxcor + deleni-x * 0.5
  while [ x <= max-pxcor ]
  [
    let y min-pycor + deleni-y * 0.5
    while [ y <= max-pycor ]
    [
      let sousedi parcel-neighbors4 patch x y
      let this-parcel-x [ parcel-x ] of patch x y
      let this-parcel-y [ parcel-y ] of patch x y
      
      ask patches with [ parcel-x = this-parcel-x and parcel-y = this-parcel-y ]
      [
        set left-neighbors item 0 sousedi
        set right-neighbors item 1 sousedi
        set up-neighbors item 2 sousedi
        set down-neighbors item 3 sousedi
      ]
      set y y + deleni-y
    ]
    set x x + deleni-x
  ]
  
  output-print (word "setup-parcel-neighbors4 in " timer " s")
end


; vytvoreni parcel
; parcela je sachovnice ocislovana od nula do max, urcene delenim
to create-parcels
  output-print (word "create-parcels start")
  reset-timer
  ; zjistime jak velke deleni mame udelat, treba deset procent
  set deleni-x round world-width * 0.1
  set deleni-y round world-height * 0.1
  
  ; a pak prochazime sachovnici podle tohoto deleni
  let i 0 ; cislo parcely v X
  let x-last min-pxcor
  let x min-pxcor + deleni-x
  while [ x-last <= max-pxcor ]
  [
    let y-last min-pycor
    let y min-pycor + deleni-y
    let j 0 ; cislo parcely v Y
    while [ y-last <= max-pycor ]
    [
      ; kdyz mam ctvercovou podminku pro patche
      ask patches with 
        [ pxcor >= x-last and pxcor <= x and
          pycor >= y-last and pycor <= y ]
      [
        ; nastavim patch-um spravny cisla parcel
        set parcel-x i
        set parcel-y j
      ]
      
      ; a pokud jsou nejake patche v ctvercove podmince oznaceny za niziny
      if any? low-lands with 
        [ pxcor >= x-last and pxcor <= x and
          pycor >= y-last and pycor <= y ]
      [
        ; pridam aktualni parcelu do seznamu nizinnejch parcel
        set low-land-parcels lput (list i j) low-land-parcels
      ]
      
      ; a pokud jsou nejake patche ve ctvercove podmince oznaceny za kopce
      if any? high-lands with 
        [ pxcor >= x-last and pxcor <= x and
          pycor >= y-last and pycor <= y ]
      [
        ; pridam aktualni parcelu do seznamu parcel v kopcich
        set high-land-parcels lput (list i j) high-land-parcels
      ]      
      
      ; a pokud chci videt parcely, tak vytvorim cary
      if show-parcels?
      [
        ; udelame cary v X-ove souradnici
        ask patches with [ pxcor = round x and pcolor != gray ]
        [
          set pcolor gray
        ]
        ; udelame cary v Y-ove souradnici
        ask patches with [ pycor = round y and pcolor != gray ]
        [
          set pcolor gray
        ]
      ]
      
      set j j + 1 ; posunuse o parcelu dal
      set y-last y
      set y y + deleni-y
      set max-parcel-y j
    ]
    set i i + 1
    set x-last x
    set x x + deleni-x
    set max-parcel-x i
  ]
  
 set max-parcel-x max-parcel-x - 1
 set max-parcel-y max-parcel-y - 1
 
 output-print (word "create-parcels in " timer " s")
end